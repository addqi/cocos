{"version":3,"sources":["file:///E:/cocos/project/CrazyGame/assets/res/scripts/manager/FigthManager.ts"],"names":["_decorator","instantiate","PhysicsSystem","resources","v3","CardManager","ConfigManager","Fighter","ccclass","property","FigthManager","dicPanel","mainCamer","soliderParent","dicSolider","dicSoliderSrc","_index","instance","_instance","touchStart","touch","camera","ray","screenPointToRay","getLocationX","getLocationY","raycastClosest","touchEnd","raycastClosestResult","pos","hitPoint","x","z","cardList","chooseCards","cardInfo","getSoliderInfo","updateCard","cardArray","addFighter","team","load","err","prefab","index","node","soliderScript","getComponent","addChild","init","hasOwnProperty","cardarr","obj","queryAll","type","key","info","cardNum","length","touchMove"],"mappings":"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","sourcesContent":["import { _decorator, CameraComponent, EventTouch, find, instantiate, Node, PhysicsSystem, Prefab, resources, v3, Vec3 } from \"cc\";\r\nimport { CardManager } from \"./CardManager\";\r\nimport { ConfigManager } from \"./ConfigManager\";\r\nimport { Fighter } from \"../battle/Fighter\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"FigthManager\")\r\nexport class FigthManager {\r\n    private dicPanel = {};\r\n    static _instance: FigthManager;\r\n    public mainCamer: CameraComponent = null;\r\n    public soliderParent: Node = null!;\r\n    public dicSolider:any = {};\r\n    public dicSoliderSrc:any = {}\r\n    static get instance() {\r\n        if (this._instance) {\r\n            return this._instance;\r\n        }\r\n        this._instance = new FigthManager();\r\n        return this._instance;\r\n    }\r\n\r\n    public touchStart(touch: EventTouch) {\r\n        let camera = this.mainCamer;\r\n        if (camera && touch) {\r\n            let ray = camera.screenPointToRay(touch.getLocationX(), touch.getLocationY());\r\n            if (ray) {\r\n                if (!PhysicsSystem.instance.raycastClosest(ray)) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public touchEnd(touch: EventTouch) {\r\n        let camera = this.mainCamer;\r\n        if (camera && touch) {\r\n            let ray = camera.screenPointToRay(touch.getLocationX(), touch.getLocationY());\r\n            if (ray) {\r\n                let raycastClosestResult = PhysicsSystem.instance.raycastClosestResult\r\n                let pos: Vec3 = v3(raycastClosestResult.hitPoint.x, 0, raycastClosestResult.hitPoint.z);\r\n\r\n                let cardList = CardManager.instance.chooseCards;\r\n                let cardInfo = this.getSoliderInfo(cardList);\r\n                CardManager.instance.updateCard(cardList, CardManager.instance.cardArray)\r\n                if (cardInfo) {\r\n\r\n                    this.addFighter(1,cardInfo,pos);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private _index = 1;\r\n    public addFighter(team,cardInfo,pos)\r\n    {\r\n        resources.load(\"prefab/fighter/Fighter\", (err, prefab: Prefab) => {\r\n            if (err) {\r\n                return;\r\n            }\r\n            let index = this._index++;\r\n\r\n            let node = instantiate(prefab)\r\n            let soliderScript = node.getComponent(Fighter);\r\n            if (this.soliderParent) {\r\n                this.soliderParent.addChild(node)\r\n            }\r\n            soliderScript.init(index,team,cardInfo,pos)\r\n         \r\n\r\n            if(!this.dicSolider.hasOwnProperty(team))\r\n            {\r\n                this.dicSolider[team] = {};\r\n            }\r\n            this.dicSolider[team][index] = node;\r\n          \r\n            if(!this.dicSoliderSrc.hasOwnProperty(team))\r\n            {\r\n              this.dicSoliderSrc[team] = {};\r\n            }\r\n            this.dicSoliderSrc[team][index] = soliderScript;\r\n\r\n        })\r\n    }\r\n\r\n    //获取小兵信息\r\n    public getSoliderInfo(cardarr) {\r\n        let cardInfo = cardarr[0];\r\n        let obj: any = ConfigManager.instance.queryAll(\"card\", \"type\", cardInfo.type)\r\n        if (obj) {\r\n            for (let key in obj) {\r\n                let info = obj[key]\r\n\r\n                if (info.cardNum == cardarr.length) {\r\n                    return info;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public touchMove(touch: EventTouch) {\r\n        let camera = this.mainCamer;\r\n        if (camera && touch) {\r\n            let ray = camera.screenPointToRay(touch.getLocationX(), touch.getLocationY());\r\n            if (ray) {\r\n                if (!PhysicsSystem.instance.raycastClosest(ray)) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"]}